knit_with_parameters('~/Downloads/1-example.Rmd')
knit_with_parameters('~/Documents/R/markdown/test/test.rmd')
library(shiny); runApp('shiny/bioint/bioint.R')
runApp('shiny/bioint/bioint.R')
runApp('shiny/bioint/bioint.R')
runApp('shiny/bioint/bioint.R')
runApp('shiny/bioint/bioint.R')
runApp('shiny/bioint/bioint.R')
runApp('shiny/bioint/bioint.R')
runApp('shiny/bioint/bioint.R')
runApp('shiny/bioint/bioint.R')
runApp('shiny/bioint/bioint.R')
runApp('shiny/bioint/bioint.R')
runApp('shiny/bioint/bioint.R')
runApp('shiny/bioint/bioint.R')
runApp('shiny/bioint/bioint.R')
runApp('shiny/bioint/bioint.R')
runApp('shiny/bioint/bioint.R')
runApp('shiny/bioint/bioint.R')
runApp('shiny/bioint/bioint.R')
runApp('shiny/bioint/bioint.R')
setwd("~/Documents/R/shiny/bioint")
library(shiny)
library(reshape2)
dat <- readRDS("data/bioint.rds")
ui <- fluidPage(
checkboxGroupInput(inputId="skole",
label="Skole",
choiceNames=levels(dat$Skole),
choiceValues=levels(dat$Skole),
inline=TRUE,
width="20%"),
checkboxGroupInput(inputId="mnd",
label="Fødselsmåned",
choiceNames=levels(dat$F.mnd),
choiceValues=levels(dat$F.mnd),
inline=TRUE,
width="20%"),
textInput(inputId = "spm",
label = "Velg responsvariabler [1, 67]",
value = "1, 3:5, 7, 9"),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
z <- paste0("c(", input$spm, ")")
z <- eval(parse(text=z))
spm <- paste0("X", z)
sel <- bioint.h[
bioint.h$Skole %in% c(levels(dat$Skole)) &
bioint.h$F.mnd %in% c(levels(dat$F.mnd)),
spm , drop=FALSE]
barplot(prop.table(table(unlist(sel))), density=20, col="grey95", space=2/3)
#    plot(unlist(dat[1:input$num, spm]))
})
}
shinyApp(ui = ui, server = server)
setwd("~/Documents/R/shiny/bioint")
library(shiny)
library(reshape2)
dat <- readRDS("data/bioint.rds")
ui <- fluidPage(
checkboxGroupInput(inputId="skole",
label="Skole",
choiceNames=levels(dat$Skole),
choiceValues=levels(dat$Skole),
inline=TRUE),
checkboxGroupInput(inputId="mnd",
label="Fødselsmåned",
choiceNames=levels(dat$F.mnd),
choiceValues=levels(dat$F.mnd),
inline=TRUE),
textInput(inputId = "spm",
label = "Velg responsvariabler [1, 67]",
value = "1, 3:5, 7, 9"),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
z <- paste0("c(", input$spm, ")")
z <- eval(parse(text=z))
spm <- paste0("X", z)
sel <- bioint.h[
bioint.h$Skole %in% c(levels(dat$Skole)) &
bioint.h$F.mnd %in% c(levels(dat$F.mnd)),
spm , drop=FALSE]
barplot(prop.table(table(unlist(sel))), density=20, col="grey95", space=2/3)
#    plot(unlist(dat[1:input$num, spm]))
})
}
shinyApp(ui = ui, server = server)
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
chbx <- function(column, label, inputId=column) {
checkboxGroupInput(inputId=inputId,
label=label,
choiceNames=levels(dat[column]),
choiceValues=levels(dat[column]),
selected=levels(dat[column]),
inline=TRUE
)
}
runApp('bioint.R')
chbx(column="Skole", label="Skole"
)
checkboxGroupInput(inputId="trinn",
label="Trinn",
choiceNames=levels(dat$Trinn),
choiceValues=levels(dat$Trinn),
selected=levels(dat$Trinn),
inline=TRUE
)
chbx <- function(column, label, inputId=column) {
checkboxGroupInput(inputId=inputId,
label=label,
choiceNames=levels(dat[column]),
choiceValues=levels(dat[column]),
selected=levels(dat[column]),
inline=TRUE
)()
}
chbx
chbx <- function(column, label, inputId=column) {
checkboxGroupInput(inputId=inputId,
label=label,
choiceNames=levels(dat[column]),
choiceValues=levels(dat[column]),
selected=levels(dat[column]),
inline=TRUE
)
}
chbx
chbx(column="Skole", label="Skole"
)()
chbx(column="Skole", label="Skole"
)
runApp('bioint.R')
setwd("~/Documents/R/shiny/bioint")
library(shiny)
dat <- readRDS("data/bioint.rds")
chbx <- function(column, label, inputId=column) {
checkboxGroupInput(inputId=inputId,
label=label,
choiceNames=levels(dat[column]),
choiceValues=levels(dat[column]),
selected=levels(dat[column]),
inline=TRUE
)
}
ui <- fluidPage(
# modifisere checkbox-layout slik at det ser litt penere ut
tags$head(
tags$style(
HTML(
"
.checkbox-inline {
margin-left: 0px;
margin-right: 10px;
}
.checkbox-inline+.checkbox-inline {
margin-left: 0px;
margin-right: 10px;
}
"
)
)
),
titlePanel("Responser fra NOU: \"Interesse for biologifagene\""),
sidebarLayout(
sidebarPanel(
chbx(column="Skole", label="Skole"
),
checkboxGroupInput(inputId="trinn",
label="Trinn",
choiceNames=levels(dat$Trinn),
choiceValues=levels(dat$Trinn),
selected=levels(dat$Trinn),
inline=TRUE
),
checkboxGroupInput(inputId="mnd",
label="Fødselsmåned",
choiceNames=levels(dat$F.mnd),
choiceValues=levels(dat$F.mnd),
selected=levels(dat$F.mnd),
inline=TRUE
),
textInput(inputId="spm",
label="Velg responsvariabler [1, 67]",
value="1, 3:5, 7, 9"
)
),
mainPanel(
plotOutput("hist")
)
)
)
server <- function(input, output) {
output$hist <- renderPlot({
z <- paste0("c(", input$spm, ")")
z <- eval(parse(text=z))
spm <- paste0("X", z)
sel <- dat[
dat$Skole %in% c(input$Skole) &
dat$Trinn %in% c(input$trinn) &
dat$F.mnd %in% c(input$mnd),
spm, drop=FALSE]
barplot(prop.table(table(unlist(sel))), density=20, col="grey95", space=2/3)
#    plot(unlist(dat[1:input$num, spm]))
})
}
shinyApp(ui = ui, server = server)
chbx <- function(column, label, inputId=column) {
tagList(checkboxGroupInput(inputId=inputId,
label=label,
choiceNames=levels(dat[column]),
choiceValues=levels(dat[column]),
selected=levels(dat[column]),
inline=TRUE
))
}
chbx(column="Skole", label="Skole"
)
tagList
chbx <- function(column, label, inputId=column) {
list(checkboxGroupInput(inputId=inputId,
label=label,
choiceNames=levels(dat[column]),
choiceValues=levels(dat[column]),
selected=levels(dat[column]),
inline=TRUE
))
}
chbx(column="Skole", label="Skole"
)
chbx <- function(column, label, inputId=column) {
checkboxGroupInput(inputId=inputId,
label=label,
choiceNames=levels(dat[column]),
choiceValues=levels(dat[column]),
selected=levels(dat[column]),
inline=TRUE
)
}
chbx <- function(column, lab, input=column) {
checkboxGroupInput(inputId=input,
label=lab,
choiceNames=levels(dat[column]),
choiceValues=levels(dat[column]),
selected=levels(dat[column]),
inline=TRUE
)
}
chbx(column="Skole", label="Skole"
)
chbx(column="Skole", lab="Skole"
)
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
runApp('bioint.R')
levels(dat$F.mnd)
c(1, levels(dat$F.mnd)[-1])
F.mnd.levels <- c("NA", levels(dat$F.mnd)[-1])
c("NA", levels(dat$F.mnd)[-1])
levels(dat$F.mnd)[c(2:13, 1)]
F.mnd.lev <- F.mnd.val <- levels(dat$F.mnd)[c(2:13, 1)]
F.mnd.lev[F.mnd.lev == 0] <- "NA"
F.mnd.lev
F.mnd.val
F.mnd.nam <- F.mnd.val <- levels(dat$F.mnd)[c(2:13, 1)]
F.mnd.nam[F.mnd.nam == 0] <- "NA"
F.mnd.nam
F.mnd.val
runApp('bioint.R')
tagsList(# modifisere checkbox-layout slik at det ser litt penere ut
tags$head(
tags$style(
HTML(
"
.checkbox-inline {
margin-left: 0px;
margin-right: 10px;
}
.checkbox-inline+.checkbox-inline {
margin-left: 0px;
margin-right: 10px;
}
div.checkbox {
margin-top: 0px;
margin-bottom: 5px;
}
.multicol {
height: 50px;
margin-bottom: 0px;
-webkit-column-count: 4; /* Chrome, Safari, Opera */
-moz-column-count: 4;    /* Firefox */
column-count: 4;
-moz-column-fill: balance;
-column-fill: balance;
}
.multicol2 {
height: 150px;
-webkit-column-count: 4; /* Chrome, Safari, Opera */
-moz-column-count: 4;    /* Firefox */
column-count: 4;
-moz-column-fill: auto;
-column-fill: auto;
}
"
)
)
)
)
tagList(# modifisere checkbox-layout slik at det ser litt penere ut
tags$head(
tags$style(
HTML(
"
.checkbox-inline {
margin-left: 0px;
margin-right: 10px;
}
.checkbox-inline+.checkbox-inline {
margin-left: 0px;
margin-right: 10px;
}
div.checkbox {
margin-top: 0px;
margin-bottom: 5px;
}
.multicol {
height: 50px;
margin-bottom: 0px;
-webkit-column-count: 4; /* Chrome, Safari, Opera */
-moz-column-count: 4;    /* Firefox */
column-count: 4;
-moz-column-fill: balance;
-column-fill: balance;
}
.multicol2 {
height: 150px;
-webkit-column-count: 4; /* Chrome, Safari, Opera */
-moz-column-count: 4;    /* Firefox */
column-count: 4;
-moz-column-fill: auto;
-column-fill: auto;
}
"
)
)
)
)
runApp('bioint.R')
source("data/extra.style.r")
source("extra.style.r")
runApp('bioint.R')
runApp('bioint.R')
F.mnd.nam <- F.mnd.val <- levels(dat$F.mnd)
F.mnd.nam <- F.mnd.val <-
F.mnd.val[F.mnd.val != 0, F.mnd.val == 0]
F.mnd.nam <- F.mnd.val <-
F.mnd.val[c(F.mnd.val != 0, F.mnd.val == 0)]
F.mnd.nam[F.mnd.nam == 0] <- "NA"
F.mnd.nam <- F.mnd.val <-
F.mnd.val[c(F.mnd.val != 0, F.mnd.val == 0)]
c(F.mnd.val != 0, F.mnd.val == 0)
which(F.mnd.val == 0)
F.mnd.nam <- F.mnd.val <- levels(dat$F.mnd)
F.mnd.nam <- F.mnd.val <-
F.mnd.val[which(F.mnd.val == 0)]
which(F.mnd.val == 0)
F.mnd.val == 0)
F.mnd.val == 0
F.mnd.val
F.mnd.nam <- F.mnd.val <- levels(dat$F.mnd)
F.mnd.nam
[which(F.mnd.val == 0)
which(F.mnd.val == 0)
F.mnd.val == 0
which(F.mnd.val != 0), which(F.mnd.val == 0)
c(which(F.mnd.val != 0), which(F.mnd.val == 0))
runApp('bioint.R')
